# Telegram Media Bot
#Certainly! Here's an improved version of the "Handle user-sent images, videos, and files" section that utilizes the Pillow and OpenCV libraries to perform additional image and video processing:
# TelegramBotPlus
import telebot
from telebot import types
import cv2
import numpy as np
from PIL import Image
import io
import phonenumbers
import schedule
import time


# Replace <YourBOTToken> with your actual bot token
bot = telebot.TeleBot("TOKEN")


@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, 'Bot started!')

@bot.message_handler(commands=['get_ids'])
def get_ids(message):
    chat_list = bot.get_chat_administrators(message.chat.id)

    response = "Group and Channel IDs:\n"
    for chat in chat_list:
        chat_id = chat.chat.id
        chat_title = chat.chat.title
        response += f"Title: {chat_title}\nID: {chat_id}\n\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['get_info'])
def get_info(message):
    chat_id = message.chat.id

    chat_info = bot.get_chat(chat_id)
    response = f"Chat Info:\nID: {chat_info.id}\nTitle: {chat_info.title}\nType: {chat_info.type}\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['get_members'])
def get_members(message):
    chat_id = message.chat.id

    members = bot.get_chat_members_count(chat_id)
    response = f"Total Members: {members}"

    bot.reply_to(message, response)

@bot.message_handler(commands=['get_admins'])
def get_admins(message):
    chat_id = message.chat.id

    admins = bot.get_chat_administrators(chat_id)
    response = "Admins:\n"
    for admin in admins:
        admin_id = admin.user.id
        admin_name = admin.user.first_name
        response += f"Name: {admin_name}\nID: {admin_id}\n\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['get_username'])
def get_username(message):
    chat_id = message.chat.id
    username = bot.get_chat(chat_id).username

    if username:
        response = f"Username: @{username}"
    else:
        response = "This chat does not have a username."

    bot.reply_to(message, response)

@bot.message_handler(commands=['get_group_members'])
def get_group_members(message):
    chat_id = message.chat.id

    members = bot.get_chat_members_count(chat_id)
    response = f"Group Members: {members}"

    bot.reply_to(message, response)

@bot.message_handler(commands=['get_channel_subscribers'])
def get_channel_subscribers(message):
    chat_id = message.chat.id

    subscribers = bot.get_chat_members_count(chat_id)
    response = f"Channel Subscribers: {subscribers}"

    bot.reply_to(message, response)

@bot.message_handler(commands=['send_message'])
def send_message_to_chat(message):
    chat_id = message.chat.id
    text = message.text.split('/send_message ')[1]

    bot.send_message(chat_id, text)
    bot.reply_to(message, "Message sent successfully!")

@bot.message_handler(content_types=['new_chat_members'])
def greet_new_member(message):
    member_names = [user.first_name for user in message.new_chat_members]
    response = f"Welcome, {' '.join(member_names)}! Feel free to introduce yourself."

    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, message.text)

@bot.inline_handler(lambda query: True)
def inline_query_handler(query):
    try:
        query_text = query.query
        response = f"You entered: {query_text}"

        results = [telebot.types.InlineQueryResultArticle(
            id='1',
            title='Echo',
            input_message_content=telebot.types.InputTextMessageContent(message_text=response)
        )]

        bot.answer_inline_query(query.id, results)
    except Exception as e:
        print(e)


# Handler for '/photo' command
@bot.message_handler(commands=['photo'])
def send_photo(message):
    chat_id = message.chat.id
    photo_url = "https://example.com/photo.jpg"  # Replace with the actual photo URL

    # Download the photo
    photo_data = bot.download_file(photo_url)
    photo_path = "photo.jpg"

    with open(photo_path, "wb") as file:
        file.write(photo_data)

    # Open the photo using OpenCV
    image = cv2.imread(photo_path)

    # Apply image processing techniques to improve quality
    # For example, you can resize, enhance colors, or apply filters
    resized_image = cv2.resize(image, (800, 600))

    # Save the processed image
    processed_photo_path = "processed_photo.jpg"
    cv2.imwrite(processed_photo_path, resized_image)

    # Send the processed photo back
    with open(processed_photo_path, "rb") as file:
        bot.send_photo(chat_id, file)

    # Cleanup: Delete the downloaded and processed photos
    os.remove(photo_path)
    os.remove(processed_photo_path)

# Handler for '/inline_keyboard' command
@bot.message_handler(commands=['inline_keyboard'])
def send_inline_keyboard(message):
    chat_id = message.chat.id
    inline_keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton("Button 1", callback_data="button1")
    button2 = types.InlineKeyboardButton("Button 2", callback_data="button2")
    button3 = types.InlineKeyboardButton("Button 3", callback_data="button3")
    inline_keyboard.add(button1, button2, button3)
    bot.send_message(chat_id, "Please choose an option:", reply_markup=inline_keyboard)

# Handler for inline keyboard button callbacks
@bot.callback_query_handler(func=lambda call: True)
def handle_inline_keyboard_callback(call):
    chat_id = call.message.chat.id
    if call.data == "button1":
        bot.send_message(chat_id, "You clicked Button 1")
    elif call.data == "button2":
        bot.send_message(chat_id, "You clicked Button 2")
    elif call.data == "button3":
        bot.send_message(chat_id, "You clicked Button 3")


# Handler for '/subscribe' command
@bot.message_handler(commands=['subscribe'])
def subscribe(message):
    chat_id = message.chat.id
    # Your subscription code here
    # Add the user to your subscription list or database
    bot.send_message(chat_id, "You have been subscribed to updates.")

# Handler for '/unsubscribe' command
@bot.message_handler(commands=['unsubscribe'])
def unsubscribe(message):
    chat_id = message.chat.id
    # Your unsubscription code here
    # Remove the user from your subscription list or database
    bot.send_message(chat_id, "You have been unsubscribed from updates.")

# Handler for '/join' command
@bot.message_handler(commands=['join'])
def join_command(message):
    # Replace 'YOUR_CHANNEL_USERNAME' with your actual channel's username
    channel_link = f"https://t.me/YOUR_CHANNEL_USERNAME"
    join_message = f"Join our channel: {channel_link}"

    # Check if the user is already a member of the channel
    user_id = message.from_user.id
    is_member = bot.get_chat_member(channel_link, user_id)

    if is_member:
        bot.send_message(message.chat.id, "You are already a member of the channel.")
    else:
        # Add the user to the channel using an inline keyboard
        keyboard = telebot.types.InlineKeyboardMarkup()
        join_button = telebot.types.InlineKeyboardButton(
            text="Join Channel",
            url=channel_link
        )
        keyboard.add(join_button)

        bot.send_message(
            message.chat.id,
            join_message,
            reply_markup=keyboard
        )

# Use the decorator bot.message_handler to handle normal messages
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # Echo the received message
    bot.send_message(message.chat.id, message.text)



# Handle document, image, and video messages
@bot.message_handler(content_types=['document', 'photo', 'video'])
def handle_media(message):
    # Process the received media
    if message.document:
        # It's a document
        file_name = message.document.file_name
        bot.reply_to(message, f"Received a document: {file_name}")
    elif message.photo:
        # It's a photo
        photo = message.photo[-1]  # Get the last photo sent (in case of multiple sizes)
        file_id = photo.file_id
        bot.reply_to(message, f"Received a photo: {file_id}")
    elif message.video:
        # It's a video
        file_id = message.video.file_id
        bot.reply_to(message, f"Received a video: {file_id}")

# Handle location messages
@bot.message_handler(content_types=['location'])
def handle_location(message):
    # Process the received location
    latitude = message.location.latitude
    longitude = message.location.longitude
    bot.reply_to(message, f"Received location: Latitude - {latitude}, Longitude - {longitude}")

# Handle inline keyboard callback
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == 'send_image':
        # Request an image from the user
        bot.send_message(call.message.chat.id, "Please send an image.")
    elif call.data == 'send_video':
        # Request a video from the user
        bot.send_message(call.message.chat.id, "Please send a video.")
    elif call.data == 'send_file':
        # Request a file from the user
        bot.send_message(call.message.chat.id, "Please send a file.")
    elif call.data == 'get_location':
        # Request the user's location
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button = types.KeyboardButton("Share Location", request_location=True)
        keyboard.add(button)
        bot.send_message(call.message.chat.id, "Please share your location.", reply_markup=keyboard)

# Handle user-sent images, videos, and files
@bot.message_handler(content_types=['photo', 'video', 'document'])
def handle_user_media(message):
    # Check the media type and process accordingly
    if message.photo:
        # It's an image
        photo = message.photo[-1]
        file_id = photo.file_id
        bot.reply_to(message, f"Received an image: {file_id}")

        # Download the image
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # Process the image using Pillow and OpenCV
        image = Image.open(io.BytesIO(downloaded_file))
        image = np.array(image)  # Convert to NumPy array

        # Apply image enhancement techniques
        image_enhanced = enhance_image(image)

        # Convert the processed image back to PIL Image
        processed_image = Image.fromarray(image_enhanced)

        # Send the processed image back
        buffer = io.BytesIO()
        processed_image.save(buffer, format='JPEG')
        buffer.seek(0)
        bot.send_photo(message.chat.id, buffer)

    elif message.video:
        # It's a video
        video = message.video
        file_id = video.file_id
        bot.reply_to(message, f"Received a video: {file_id}")

        # Download the video
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # Save the video locally
        video_path = 'received_video.mp4'
        with open(video_path, 'wb') as file:
            file.write(downloaded_file)

        # Process the video using OpenCV
        processed_video_path = enhance_video(video_path)

        # Send the processed video back
        with open(processed_video_path, 'rb') as file:
            bot.send_video(message.chat.id, file)

    elif message.document:
        # It's a file
        file_id = message.document.file_id
        bot.reply_to(message, f"Received a file: {file_id}")

        # Download the file
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # Process the file using Pillow and OpenCV
        processed_file = enhance_file(downloaded_file)

        # Send the processed file back
        processed_file.seek(0)
        bot.send_document(message.chat.id, processed_file)

def enhance_image(image):
    # Apply image enhancement techniques using Pillow and OpenCV
    # Example: Enhance brightness and contrast
    enhanced_image = Image.fromarray(image)

    # Brightness enhancement
    enhanced_image = enhanced_image.point(lambda x: x * 1.2)

    # Contrast enhancement
    enhanced_image = ImageEnhance.Contrast(enhanced_image).enhance(1.2)

    # Additional image enhancement steps using OpenCV
    # ...

    # Convert the enhanced image to NumPy array
    enhanced_image = np.array(enhanced_image)

    return enhanced_image

def enhance_video(video_path):
    # Process the video using OpenCV
    cap = cv2.VideoCapture(video_path)
    frame_width = int(cap.get(3))
    frame_height = int(cap.get(4))
    out = cv2.VideoWriter('processed_video.mp4', cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'), 30,
                          (frame_width, frame_height))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Apply video enhancement techniques using OpenCV
        # Example: Convert to grayscale
        frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Additional video enhancement steps using OpenCV
        # ...

        out.write(frame_gray)

    cap.release()
    out.release()

    return 'processed_video.mp4'

def enhance_file(file_data):
    # Process the file using Pillow and OpenCV
    processed_file = io.BytesIO(file_data)

    # Apply file enhancement techniques
    # Example: Resize the file
    processed_file = resize_file(processed_file)

    # Additional file enhancement steps using OpenCV
    # ...

    return processed_file

def resize_file(file):
    # Resize the file using Pillow
    file = Image.open(file)
    resized_file = file.resize((file.width // 2, file.height // 2))
    resized_file = resized_file.convert('RGB')
    processed_file = io.BytesIO()
    resized_file.save(processed_file, format='JPEG')
    processed_file.seek(0)

    return processed_file


# Handle unknown commands or messages
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    # Send an error message for unknown commands or messages
    error_message = "Sorry, I don't understand. Type /help for assistance."
    bot.reply_to(message, error_message)



contacts = {}


# Handler for the '/addcontact' command
@bot.message_handler(commands=['addcontact'])
def add_contact(message):
    msg = bot.reply_to(message, "Enter the contact name:")
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    name = message.text
    msg = bot.reply_to(message, "Enter the contact phone number:")
    bot.register_next_step_handler(msg, process_phone_number_step, name)

def process_phone_number_step(message, name):
    phone_number = message.text
    try:
        parsed_number = phonenumbers.parse(phone_number, None)
        if not phonenumbers.is_valid_number(parsed_number):
            raise ValueError("Invalid phone number")
        contacts[name] = phone_number
        bot.reply_to(message, "Contact added successfully!")
    except Exception as e:
        bot.reply_to(message, f"Error: {str(e)}")

# Handler for the '/getcontact' command
@bot.message_handler(commands=['getcontact'])
def get_contact(message):
    keyboard = types.InlineKeyboardMarkup()
    for name in contacts:
        keyboard.add(types.InlineKeyboardButton(name, callback_data=name))
    bot.reply_to(message, "Choose a contact:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    name = call.data
    if name in contacts:
        bot.answer_callback_query(call.id, text=f"Name: {name}\nPhone Number: {contacts[name]}")
    else:
        bot.answer_callback_query(call.id, text="Contact not found!")

# Handler for the '/deletecontact' command
@bot.message_handler(commands=['deletecontact'])
def delete_contact(message):
    keyboard = types.InlineKeyboardMarkup()
    for name in contacts:
        keyboard.add(types.InlineKeyboardButton(name, callback_data=name))
    bot.reply_to(message, "Choose a contact to delete:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def delete_callback_query(call):
    name = call.data
    if name in contacts:
        del contacts[name]
        bot.answer_callback_query(call.id, text="Contact deleted successfully!")
    else:
        bot.answer_callback_query(call.id, text="Contact not found!")

# Handler for the '/searchcontact' command
@bot.message_handler(commands=['searchcontact'])
def search_contact(message):
    msg = bot.reply_to(message, "Enter the contact name:")
    bot.register_next_step_handler(msg, process_search_step)

def process_search_step(message):
    name = message.text
    if name in contacts:
        bot.reply_to(message, f"Name: {name}\nPhone Number: {contacts[name]}")
    else:
        bot.reply_to(message, "Contact not found!")

# Handler for the '/listcontacts' command
@bot.message_handler(commands=['listcontacts'])
def list_contacts(message):
    if contacts:
        response = "Contacts:\n"
        for name, phone_number in contacts.items():
            response += f"{name}: {phone_number}\n"
    else:
        response = "No contacts found."
    bot.reply_to(message, response)

# Handler for the '/updatecontact' command
@bot.message_handler(commands=['updatecontact'])
def update_contact(message):
    msg = bot.reply_to(message, "Enter the contact name you want to update:")
    bot.register_next_step_handler(msg, process_update_name_step)

def process_update_name_step(message):
    name = message.text
    if name in contacts:
        msg = bot.reply_to(message, "Enter the new phone number:")
        bot.register_next_step_handler(msg, process_update_phone_number_step, name)
    else:
        bot.reply_to(message, "Contact not found!")

def process_update_phone_number_step(message, name):
    phone_number = message.text
    try:
        parsed_number = phonenumbers.parse(phone_number, None)
        if not phonenumbers.is_valid_number(parsed_number):
            raise ValueError("Invalid phone number")
        contacts[name] = phone_number
        bot.reply_to(message, "Contact updated successfully!")
    except Exception as e:
        bot.reply_to(message, f"Error: {str(e)}")

# Handler for the '/sendmessage' command
@bot.message_handler(commands=['sendmessage'])
def send_message_to_contact(message):
    keyboard = types.InlineKeyboardMarkup()
    for name in contacts:
        keyboard.add(types.InlineKeyboardButton(name, callback_data=name))
    bot.reply_to(message, "Choose a contact to send a message:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def send_message_callback_query(call):
    name = call.data
    if name in contacts:
        msg = bot.reply_to(call.message, "Enter the message you want to send:")
        bot.register_next_step_handler(msg, process_send_message_step, name)
    else:
        bot.answer_callback_query(call.id, text="Contact not found!")

def process_send_message_step(message, name):
    if name in contacts:
        phone_number = contacts[name]
        message_text = message.text
        # Code to send the message to the phone number
        bot.reply_to(message, "Message sent successfully!")
    else:
        bot.reply_to(message, "Contact not found!")

# Handler for the '/blockcontact' command
@bot.message_handler(commands=['blockcontact'])
def block_contact(message):
    msg = bot.reply_to(message, "Enter the contact name you want to block:")
    bot.register_next_step_handler(msg, process_block_contact_step)

def process_block_contact_step(message):
    name = message.text
    if name in contacts:
        contacts[name] = None  # Set the phone number to None to indicate blocked contact
        bot.reply_to(message, f"Contact {name} blocked successfully!")
    else:
        bot.reply_to(message, "Contact not found!")

# Handler for the '/unblockcontact' command
@bot.message_handler(commands=['unblockcontact'])
def unblock_contact(message):
    msg = bot.reply_to(message, "Enter the contact name you want to unblock:")
    bot.register_next_step_handler(msg, process_unblock_contact_step)

def process_unblock_contact_step(message):
    name = message.text
    if name in contacts:
        contacts[name] = ''  # Reset the phone number to an empty string
        bot.reply_to(message, f"Contact {name} unblocked successfully!")
    else:
        bot.reply_to(message, "Contact not found!")

# Handler for all other messages
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.reply_to(message, "Invalid command. Use /addcontact, /getcontact, /deletecontact, /searchcontact, /listcontacts, /updatecontact, /sendmessage, /blockcontact, or /unblockcontact.")



# Dictionary to store user participation status
participation_status = {}

@bot.message_handler(commands=['start'])
def start(message):
    # Generate a unique invitation link for the user
    group_link = generate_invitation_link()
    
    # Save the invitation link with the user's chat ID in a database or file
    save_invitation_link(message.chat.id, group_link)
    
    # Set the participation status of the user to False initially
    participation_status[message.chat.id] = False
    
    # Send the invitation link to the user
    bot.send_message(message.chat.id, f"Click the link to join the group: {group_link}")

@bot.message_handler(content_types=['text'])
def check_participation(message):
    # Check if the user has joined the group after clicking the invitation link
    if message.chat.id in participation_status and not participation_status[message.chat.id]:
        # User has sent a message without joining the group first
        bot.reply_to(message, "Please join the group using the invitation link before sending messages.")
    else:
        # User has already joined the group, handle the message normally
        # Add your desired logic here
        bot.reply_to(message, "Message received. Thank you!")

@bot.inline_handler(func=lambda query: True)
def inline_query(inline_query):
    # Process inline queries to handle invitation link verification
    if inline_query.query.startswith("verify_join:"):
        chat_id = inline_query.from_user.id
        invitation_id = inline_query.query.split(":")[1]
        
        if verify_join(chat_id, invitation_id):
            participation_status[chat_id] = True
            bot.answer_inline_query(inline_query.id, results=[telebot.types.InlineQueryResultArticle(id='1', title='Verification Successful', input_message_content=telebot.types.InputTextMessageContent(message_text='You have successfully joined the group.'))])
        else:
            bot.answer_inline_query(inline_query.id, results=[telebot.types.InlineQueryResultArticle(id='1', title='Verification Failed', input_message_content=telebot.types.InputTextMessageContent(message_text='Failed to join the group. Please try again.'))])

def generate_invitation_link():
    # Generate a unique identifier for the invitation link
    invitation_id = str(uuid.uuid4())
    
    # Construct the invitation link using the identifier
    group_link = f"example.com/join/{invitation_id}"
    
    return group_link

def save_invitation_link(chat_id, group_link):
    # Here you can implement the logic to save the invitation link
    # with the user's chat ID in a database or file
    # For example, you can store it in a dictionary or a database table

    # Example dictionary-based storage
    invitation_links[chat_id] = group_link

    # Example file-based storage (append to a text file)
    with open('invitation_links.txt', 'a') as file:
        file.write(f"{chat_id},{group_link}\n")

def verify_join(chat_id, invitation_id):
    # Here you can implement the logic to verify if a user has joined the group
    # based on the invitation link
    # You can check the invitation ID against a database or perform any other validation
    
    # Example verification logic
    # Check if the invitation ID matches the expected value
    expected_invitation_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, "example.com"))
    if invitation_id == expected_invitation_id:
        return True
    else:
        return False


# Command: /remind
@bot.message_handler(commands=['remind'])
def set_reminder(message):
    # Your code to handle setting reminders here
    bot.reply_to(message, "Reminder set successfully!")

# Command: /cancel_remind
@bot.message_handler(commands=['cancel_remind'])
def cancel_reminder(message):
    # Your code to handle canceling reminders here
    bot.reply_to(message, "Reminder canceled successfully!")

# Scheduled job example
def job():
    # Your code for the scheduled job here
    bot.send_message('YOUR_CHAT_ID', 'This is a scheduled message.')

# Schedule a job
schedule.every().day.at('08:00').do(job)

# Run the bot
while True:
    try:
        bot.polling()
        schedule.run_pending()
        time.sleep(1)
    except Exception as e:
        # Handle exceptions gracefully
        print(e)
        time.sleep(5)

